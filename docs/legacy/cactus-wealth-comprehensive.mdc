---
alwaysApply: false
---
# üåµ Cactus Wealth - Comprehensive Development Constitution

## üìú Core Engineering Principles

**CLARITY OVER CLEVERNESS**: Code must be self-documenting and maintainable. Never sacrifice readability for "smart" solutions.

**ZERO DEAD CODE**: No commented-out code or unused imports. Use git history, not comments, for code archaeology.

**EXPLICIT NAMING**: All variables, functions, and classes must have descriptive English names. Avoid ambiguous abbreviations.

**COMPOSITION OVER INHERITANCE**: Favor small, single-purpose functions. Keep complexity low and testability high.

**STRICT TYPING**: Use TypeScript strict mode in [tsconfig.json](mdc:cactus-wealth-frontend/tsconfig.json) and Python type hints in [pyproject.toml](mdc:cactus-wealth-backend/pyproject.toml). Never use `any` without justification.

## üíæ Backend Architecture (FastAPI & SQLModel)

### Separation of Concerns
**MANDATORY LAYER SEPARATION**:
- **Endpoints** ([api/v1/endpoints/](mdc:cactus-wealth-backend/src/cactus_wealth/api/v1/endpoints/)): Only routing, basic validation, HTTP error handling
- **Services** ([services.py](mdc:cactus-wealth-backend/src/cactus_wealth/services.py)): Complete business logic
- **CRUD** ([crud.py](mdc:cactus-wealth-backend/src/cactus_wealth/crud.py)): Pure database operations
- **Models** ([models.py](mdc:cactus-wealth-backend/src/cactus_wealth/models.py)): Database schema definitions
- **Schemas** ([schemas.py](mdc:cactus-wealth-backend/src/cactus_wealth/schemas.py)): Data validation and serialization

**NEVER** put business logic directly in endpoints. Endpoints are a thin routing layer.

### Dependency Injection Requirements
**MANDATORY** use of `Depends` for:
- Database sessions via [database.py](mdc:cactus-wealth-backend/src/cactus_wealth/database.py)
- Business services
- Authentication via [security.py](mdc:cactus-wealth-backend/src/cactus_wealth/security.py)
- Configuration from [config.py](mdc:cactus-wealth-backend/src/cactus_wealth/core/config.py)

### Database Operations
**SQLModel Requirements**:
- Explicit table names using `table=True`
- Indexes on frequently queried fields
- Proper constraints (unique, foreign keys)
- Audit fields (`created_at`, `updated_at`) when relevant

**ASYNC OPERATIONS**: Use `async/await` for ALL I/O:
- Database queries
- External HTTP calls
- File operations

**TRANSACTIONS**: Use `db.begin()` for complex multi-step operations.

### Schema Validation
**PYDANTIC EXCLUSIVE**: All input validation through Pydantic schemas only.

**SCHEMA SEPARATION**:
- `Create`: Entity creation
- `Update`: Entity updates (optional fields)
- `Response`: API responses
- `InDB`: Internal representation

**SECURITY**: Never expose sensitive internal fields (hashed_password, internal_ids) in response schemas.

### Error Handling
**CONSISTENT ERRORS**: Use `HTTPException` with appropriate status codes.

**CUSTOM EXCEPTIONS**: Create business-specific exceptions inheriting from `Exception`.

**LOGGING**: Proper error logging using configured system.

## üñ•Ô∏è Frontend Architecture (Next.js & React)

### Component Strategy
**SERVER COMPONENTS DEFAULT**: Use React Server Components unless you need:
- Client-side event handlers
- React hooks (`useState`, `useEffect`)
- Browser APIs (localStorage, geolocation)

**COMPONENT SIZE**: Maximum 100 lines per component. Decompose larger components.

**ORGANIZATION** following [app/](mdc:cactus-wealth-frontend/app) structure:
- `components/ui/`: shadcn/ui base components
- `components/layout/`: Layout components ([header.tsx](mdc:cactus-wealth-frontend/components/layout/header.tsx), [sidebar.tsx](mdc:cactus-wealth-frontend/components/layout/sidebar.tsx))
- `components/[feature]/`: Feature-specific components
- `app/[route]/components/`: Page-specific components

### Data Management
**API ABSTRACTION**: All data fetching through [lib/api.ts](mdc:cactus-wealth-frontend/lib/api.ts). Components must NOT contain URLs or HTTP logic.

**STATE HIERARCHY**:
1. Server Components + Server Actions (mutations)
2. Native React hooks (`useState`, `useContext`)
3. TanStack Query (complex server state)
4. Zustand (complex global client state)

**ERROR HANDLING**: Implement loading states and error boundaries for all async operations.

### UI and Styling
**SHADCN/UI EXCLUSIVE**: Use only [components/ui/](mdc:cactus-wealth-frontend/components/ui) components. No custom basic UI components.

**TAILWIND CSS**: Apply styles via [tailwind.config.ts](mdc:cactus-wealth-frontend/tailwind.config.ts). Avoid custom CSS unless absolutely necessary.

**DESIGN TOKENS**: Use consistent variables from [globals.css](mdc:cactus-wealth-frontend/app/globals.css).

**NO INLINE STYLES**: Prefer Tailwind classes or CSS modules for complex styling.

### Navigation and Routing
**APP ROUTER**: Use Next.js 14 App Router consistently via [app/](mdc:cactus-wealth-frontend/app) structure.

**NESTED LAYOUTS**: Implement proper layout hierarchy using `layout.tsx` files.

**SERVER ACTIONS**: Prefer Server Actions over API routes for simple mutations.

### TypeScript Standards
**TYPE DEFINITIONS**: Centralize types in [types/index.ts](mdc:cactus-wealth-frontend/types/index.ts).

**NO ANY**: Never use `any`. Use `unknown` with type guards when uncertain.

**STRICT INTERFACES**: Define precise interfaces for all component props.

## üß™ Testing Strategy

### Backend Testing
**UNIT TESTS**: All business services require `pytest` tests in [tests/](mdc:cactus-wealth-backend/tests).

**INTEGRATION TESTS**: All API endpoints need integration tests.

**FIXTURES**: Use pytest fixtures in `conftest.py` for test data setup.

**COVERAGE**: Minimum 80% coverage for business logic.

**NO REAL DATA**: Use factories or fixtures, never real data in tests.

### Frontend Testing
**COMPONENT TESTS**: Complex components need Jest + React Testing Library tests.

**E2E TESTS**: Critical flows require Playwright tests via [playwright.config.ts](mdc:cactus-wealth-frontend/playwright.config.ts).

**ACCESSIBILITY**: Test accessibility using a11y testing tools.

**USER BEHAVIOR**: Test user behaviors, not implementation details.

### Testing Pyramid
**STRATEGY**: Many unit tests, some integration tests, few E2E tests.

**DESCRIPTIVE NAMES**: `should_return_error_when_user_not_found`

**FAST TESTS**: Keep tests quick and deterministic. Mock external dependencies.

## üîí Security Framework

### Authentication & Authorization
**JWT TOKENS**: Use FastAPI's `OAuth2PasswordBearer` via [security.py](mdc:cactus-wealth-backend/src/cactus_wealth/security.py).

**NEVER TRUST CLIENT**: Always validate on backend, never rely on client-side validation.

**AUTHORIZATION MIDDLEWARE**: Protect sensitive routes with proper middleware.

**RATE LIMITING**: Implement rate limiting for public endpoints.

### Sensitive Data Management
**NO HARDCODED SECRETS**: Use environment variables for all sensitive configuration.

**BCRYPT HASHING**: Hash passwords with proper salt via [security.py](mdc:cactus-wealth-backend/src/cactus_wealth/security.py).

**INPUT SANITIZATION**: Sanitize all user inputs to prevent XSS and SQL injection.

### Communication & Logging
**HTTPS PRODUCTION**: Use HTTPS for all production communication.

**NO SENSITIVE LOGS**: Never log passwords, tokens, or PII.

**AUDIT LOGS**: Log critical operations (login, financial data changes).

**FILE VALIDATION**: Validate and sanitize uploaded files before processing.

## üîÄ Git Workflow

### Conventional Commits
**STRICT ADHERENCE** to Conventional Commits:
- `feat(scope): description` - New functionality
- `fix(scope): description` - Bug fixes
- `docs(scope): description` - Documentation changes
- `style(scope): description` - Formatting/style changes
- `refactor(scope): description` - Code refactoring
- `test(scope): description` - Adding/fixing tests
- `chore(scope): description` - Maintenance tasks

### Commit Structure
**ATOMIC COMMITS**: One commit = one logical change.

**CLEAR MESSAGES**: Explain WHAT and WHY, not HOW.

**50 CHARACTER LIMIT**: First line under 50 characters, additional details in body.

**NEVER COMMIT**:
- Local config files (.env, IDE configs)
- Compiled dependencies (node_modules, __pycache__)
- Temporary or log files

### Branching Strategy
**FEATURE BRANCHES**: Use `feature/descriptive-name` for development.

**MAIN DEPLOYABLE**: Keep `main` branch always deployable.

**REBASE BEFORE MERGE**: Maintain clean history with rebase.

**CLEANUP**: Delete feature branches after merge.

## üöÄ Development Workflow

### Project Structure
Reference the complete project structure:
- **Backend**: [cactus-wealth-backend/](mdc:cactus-wealth-backend)
- **Frontend**: [cactus-wealth-frontend/](mdc:cactus-wealth-frontend)
- **Configuration**: [docker-compose.yml](mdc:docker-compose.yml)
- **Startup**: [start.sh](mdc:start.sh)

### Migration Requirements
**DATABASE CHANGES**: Any [models.py](mdc:cactus-wealth-backend/src/cactus_wealth/models.py) changes require Alembic migrations in [alembic/versions/](mdc:cactus-wealth-backend/alembic/versions).

### Quality Gates
**LINTING**: Code must pass all linters:
- Python: `ruff` and `mypy` via [pyproject.toml](mdc:cactus-wealth-backend/pyproject.toml)
- TypeScript: `ESLint` and `Prettier` via [package.json](mdc:cactus-wealth-frontend/package.json)

---

*This comprehensive constitution governs all code generation and refactoring in Cactus Wealth. Every line must adhere to these principles for quality, security, and maintainability.*
