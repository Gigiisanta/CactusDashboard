version: '3'

vars:
  AWS_INSTANCE_ID: "i-022f3394d98803da8"
  SSH_KEY: "cactus-key.pem"
  COMPOSE_FILE: "docker-compose.yml"
  PODMAN_COMPOSE: "podman-compose"

tasks:
  # ===== DESARROLLO LOCAL =====
  dev:
    desc: "🚀 Iniciar desarrollo local completo (Podman backend + Podman frontend)"
    silent: true
    cmds:
      - task: cleanup
      - echo "🌵 Iniciando CactusDashboard en modo desarrollo con Podman para todos los servicios..."
      - task: podman:ensure
      - |
        set -e
        echo "🔧 Iniciando stack completo con Podman..."
        ATT=0
        # Intentar bajar el stack primero para liberar puertos gestionados por Podman
        {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} down || true
        until {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d; do
          ATT=$((ATT+1))
          if [ $ATT -ge 3 ]; then
            echo "⚠️ Falló levantar stack tras 3 intentos. Intentando reset de Podman..."
            task --silent podman:reset
            break
          fi
          echo "⏳ Reintentando levantar stack ($ATT/3)..."
          sleep 3
        done
        echo "⏳ Esperando que los servicios estén listos..."
        ATT=0
        until (curl -sf http://localhost:8000/health >/dev/null 2>&1) && (curl -sf http://localhost:3000/api/health >/dev/null 2>&1); do
          ATT=$((ATT+1))
          if [ $ATT -ge 30 ]; then
            echo "⚠️ Los servicios no están saludables aún. Continuando igualmente."
            break
          fi
          sleep 3
        done
        echo "🎉 Desarrollo iniciado! Backend http://localhost:8000, Frontend http://localhost:3000"

  dev:frontend:
    desc: "🚀 Iniciar solo frontend en localhost:3000"
    silent: true
    cmds:
      - echo "🌵 Iniciando frontend en Podman..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d frontend'

  dev:frontend:local:
    desc: "🚀 Iniciar frontend localmente (sin Docker)"
    silent: true
    cmds:
      - echo "🌐 Iniciando frontend localmente..."
      - ./scripts/start-frontend-local.sh

  dev:frontend:clean:
    desc: "🧹 Iniciar frontend con limpieza completa"
    silent: true
    cmds:
      - echo "🧹 Limpiando e iniciando frontend..."
      - task: cleanup:ports
      - cd cactus-wealth-frontend && rm -rf .next node_modules/.cache
      - cd cactus-wealth-frontend && npm install
      - ./scripts/start-frontend-local.sh

  dev:stop:
    desc: "⏹️ Detener desarrollo local"
    silent: true
    cmds:
      - echo "🛑 Deteniendo servicios locales..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} down'
      - task: cleanup
      - echo "✅ Servicios locales detenidos"

  dev:restart:
    desc: "🔄 Reiniciar desarrollo local"
    silent: true
    cmds:
      - echo "🔄 Reiniciando desarrollo local..."
      - task: dev:stop
      - sleep 3
      - task: dev

  dev:rebuild:
    desc: "🔨 Rebuild completo y reiniciar"
    silent: true
    cmds:
      - echo "🔨 Rebuilding servicios..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} down'
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} build --no-cache'
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d'
      - echo "✅ Rebuild completado"

  build:
    desc: "🔨 Construir todas las imágenes"
    silent: true
    cmds:
      - echo "🔨 Construyendo todas las imágenes..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} build'
      - echo "✅ Imágenes construidas"

  build:backend:
    desc: "🔨 Construir imagen del backend"
    silent: true
    cmds:
      - echo "🔨 Construyendo imagen del backend..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} build backend'
      - echo "✅ Imagen del backend construida"

  build:frontend:
    desc: "🔨 Construir imagen del frontend"
    silent: true
    cmds:
      - echo "🔨 Construyendo imagen del frontend..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} build frontend'
      - echo "✅ Imagen del frontend construida"

  build:frontend:direct:
    desc: "🔨 Construir imagen del frontend directamente con podman"
    silent: true
    cmds:
      - echo "🔨 Construyendo imagen del frontend directamente..."
      - task: podman:check
      - 'cd cactus-wealth-frontend && podman build -t cactusdashboard_frontend -f Dockerfile.dev .'
      - echo "✅ Imagen del frontend construida directamente"

  build:frontend:verbose:
    desc: "🔨 Construir imagen del frontend con salida verbose"
    silent: false
    cmds:
      - echo "🔨 Construyendo imagen del frontend con salida verbose..."
      - task: podman:check
      - '{{.PODMAN_COMPOSE}} --verbose -f {{.COMPOSE_FILE}} build frontend'
      - echo "✅ Imagen del frontend construida"

  # ===== LOGS Y DEBUGGING =====
  logs:
    desc: "📺 Ver logs en vivo - todos los servicios"
    silent: true
    cmds:
      - echo "📺 Logs en vivo (Ctrl+C para salir)..."
      - |
        set -e
        SERVICES="cactus-backend cactus-frontend cactus-db cactus-redis cactus-nginx cactus-prometheus cactus-grafana"
        ensure_targets() {
          RUNNING_NAMES="$(podman ps --format '{{.Names}}')"
          TARGETS=""
          for s in $SERVICES; do
            if echo "$RUNNING_NAMES" | grep -qx "$s"; then
              TARGETS="$TARGETS $s"
            fi
          done
        }

        echo "🔎 Verificando Podman..."
        if ! podman info >/dev/null 2>&1; then
          echo "🔧 Podman no disponible. Intentando iniciar máquina..."
          task --silent podman:ensure || true
        fi

        echo "🔎 Detectando contenedores activos..."
        ensure_targets
        if [ -z "$TARGETS" ]; then
          echo "🚀 No hay contenedores. Iniciando stack con podman-compose..."
          {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d
          echo "⏳ Esperando inicio de servicios..."
          sleep 8
          ensure_targets
        fi

        if [ -z "$TARGETS" ]; then
          echo "❌ No se pudieron iniciar los servicios. Revisa: task debug"
          exit 1
        fi

        echo "📦 Mostrando logs de:$TARGETS"
        # Usamos podman logs para evitar la limitación con múltiples contenedores en modo remoto
        exec podman logs -f --tail=50 $TARGETS

  logs:backend:
    desc: "📺 Ver logs del backend"
    silent: true
    cmds:
      - echo "📺 Logs del backend (Ctrl+C para salir)..."
      - |
        set -e
        echo "🔎 Verificando Podman..."
        podman info >/dev/null 2>&1 || task --silent podman:ensure || true
        if ! podman ps --format '{{.Names}}' | grep -qx 'cactus-backend'; then
          echo "🚀 Iniciando backend con podman-compose..."
          {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d backend
          sleep 5
        fi
        echo "📦 Mostrando logs de: cactus-backend"
        exec podman logs -f --tail=50 cactus-backend

  logs:frontend:
    desc: "📺 Ver logs del frontend"
    silent: true
    cmds:
      - echo "📺 Logs del frontend (Ctrl+C para salir)..."
      - |
        set -e
        echo "🔎 Verificando Podman..."
        podman info >/dev/null 2>&1 || task --silent podman:ensure || true
        if ! podman ps --format '{{.Names}}' | grep -qx 'cactus-frontend'; then
          echo "🚀 Iniciando frontend con podman-compose..."
          {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d frontend
          sleep 5
        fi
        echo "📦 Mostrando logs de: cactus-frontend"
        exec podman logs -f --tail=50 cactus-frontend

  logs:db:
    desc: "📺 Ver logs de la base de datos"
    silent: true
    cmds:
      - echo "📺 Logs de la base de datos (Ctrl+C para salir)..."
      - |
        set -e
        echo "🔎 Verificando Podman..."
        podman info >/dev/null 2>&1 || task --silent podman:ensure || true
        if ! podman ps --format '{{.Names}}' | grep -qx 'cactus-db'; then
          echo "🚀 Iniciando base de datos con podman-compose..."
          {{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} up -d db
          sleep 5
        fi
        echo "📦 Mostrando logs de: cactus-db"
        exec podman logs -f --tail=50 cactus-db

  debug:
    desc: "🔍 Diagnóstico completo del sistema"
    silent: true
    cmds:
      - echo "🔍 Diagnóstico completo de CactusDashboard..."
      - task: status:local
      - task: health:local
      - task: ports
      - task: resources
      - task: docker:diagnose

  shell:backend:
    desc: "🐚 Shell interactivo en backend"
    silent: true
    cmds:
      - echo "🐚 Entrando al contenedor backend (exit para salir)..."
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} exec backend /bin/bash'

  shell:frontend:
    desc: "🐚 Acceder al shell del frontend"
    silent: true
    cmds:
      - echo "🐚 Accediendo al shell del frontend..."
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} exec frontend /bin/sh'

  shell:db:
    desc: "🐚 Acceder al shell de la base de datos"
    silent: true
    cmds:
      - echo "🐚 Accediendo al shell de la base de datos..."
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} exec db /bin/bash'

  # ===== MONITOREO Y ESTADO =====
  status:
    desc: "📊 Estado general del sistema"
    silent: true
    cmds:
      - echo "📊 Estado de CactusDashboard..."
      - task: status:local
      - task: status:aws

  status:local:
    desc: "📊 Estado de servicios locales"
    silent: true
    cmds:
      - echo "🏠 Servicios locales:"
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} ps'
      - echo ""
      - echo "🌐 URLs disponibles:"
      - echo "Frontend http://localhost:3000"
      - echo "Backend http://localhost:8000"
      - echo "API Docs http://localhost:8000/docs"
      - echo "Health http://localhost:8000/health"

  status:aws:
    desc: "📊 Estado de instancia AWS"
    silent: true
    cmds:
      - echo "☁️ Estado de AWS:"
      - aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].{State:State.Name,IP:PublicIpAddress,Type:InstanceType}' --output table

  health:
    desc: "🏥 Verificar salud de servicios"
    silent: true
    cmds:
      - echo "🏥 Verificando salud de servicios..."
      - task: health:local
      - task: health:aws

  health:local:
    desc: "🏥 Salud de servicios locales"
    silent: true
    cmds:
      - echo "🏠 Salud local:"
      - curl -s http://localhost:8000/health || echo "❌ Backend no responde"
      - curl -s http://localhost:3000/api/health || echo "❌ Frontend no responde"

  health:aws:
    desc: "🏥 Salud de servicios AWS"
    silent: true
    cmds:
      - echo "☁️ Salud AWS:"
      - task: aws:ip
      - echo "Verificando endpoints AWS..."
      - curl -s http://$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text):8000/health || echo "❌ Backend AWS no responde"

  ports:
    desc: "🔌 Verificar puertos en uso"
    silent: true
    cmds:
      - echo "🔌 Puertos en uso:"
      - lsof -i :3000 || echo "✅ Puerto 3000 libre"
      - lsof -i :8000 || echo "✅ Puerto 8000 libre"
      - lsof -i :5432 || echo "✅ Puerto 5432 libre"
      - lsof -i :6379 || echo "✅ Puerto 6379 libre"

  resources:
    desc: "💾 Uso de recursos del sistema"
    silent: true
    cmds:
      - echo "💾 Uso de recursos:"
      - podman stats --no-stream
      - echo ""
      - echo "💿 Espacio en disco:"
      - df -h

  # ===== AWS MANAGEMENT =====
  aws:start:
    desc: "▶️ Iniciar instancia EC2"
    silent: true
    cmds:
      - echo "▶️ Iniciando instancia AWS..."
      - aws ec2 start-instances --instance-ids {{.AWS_INSTANCE_ID}}
      - echo "⏳ Esperando que la instancia esté lista..."
      - aws ec2 wait instance-running --instance-ids {{.AWS_INSTANCE_ID}}
      - echo "✅ Instancia iniciada"
      - task: aws:ip

  aws:stop:
    desc: "⏹️ Detener instancia (ahorrar dinero)"
    silent: true
    cmds:
      - echo "⏹️ Deteniendo instancia AWS..."
      - aws ec2 stop-instances --instance-ids {{.AWS_INSTANCE_ID}}
      - echo "✅ Instancia detenida (ahorrando dinero)"

  aws:status:
    desc: "📊 Estado de la instancia"
    silent: true
    cmds:
      - echo "📊 Estado de instancia AWS:"
      - aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].{State:State.Name,IP:PublicIpAddress,Type:InstanceType,LaunchTime:LaunchTime}' --output table

  aws:ip:
    desc: "🌐 Obtener IP pública"
    silent: true
    cmds:
      - echo "🌐 IP pública:"
      - aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text

  aws:costs:
    desc: "💰 Ver información de costos"
    silent: true
    cmds:
      - echo "💰 Información de costos AWS:"
      - aws ce get-cost-and-usage --time-period Start=2024-01-01,End=$(date +%Y-%m-%d) --granularity MONTHLY --metrics BlendedCost --group-by Type=DIMENSION,Key=SERVICE

  aws:ssh:
    desc: "🔑 Conectar SSH a la instancia"
    silent: true
    cmds:
      - echo "🔑 Conectando SSH..."
      - ssh -i {{.SSH_KEY}} ubuntu@$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

  deploy:aws:
    desc: "🚀 Desplegar a AWS"
    silent: true
    cmds:
      - echo "🚀 Desplegando a AWS..."
      - task: aws:start
      - echo "⏳ Esperando que la instancia esté lista..."
      - sleep 30
      - echo "📦 Desplegando aplicación..."
      - ssh -i {{.SSH_KEY}} ubuntu@$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text) "cd /opt/cactus-dashboard && docker-compose pull && docker-compose up -d"
      - echo "✅ Despliegue completado"
      - task: aws:ip

  # ===== OAUTH Y AUTENTICACIÓN =====
  oauth:verify:
    desc: "🔐 Verificar configuración OAuth"
    silent: true
    cmds:
      - echo "🔐 Verificando configuración OAuth..."
      - test -n "$GOOGLE_CLIENT_ID" && echo "✅ GOOGLE_CLIENT_ID configurado" || echo "❌ GOOGLE_CLIENT_ID no configurado"
      - test -n "$GOOGLE_CLIENT_SECRET" && echo "✅ GOOGLE_CLIENT_SECRET configurado" || echo "❌ GOOGLE_CLIENT_SECRET no configurado"
      - test -n "$NEXTAUTH_URL" && echo "✅ NEXTAUTH_URL configurado" || echo "❌ NEXTAUTH_URL no configurado"

  oauth:update:
    desc: "🔄 Actualizar credenciales OAuth"
    silent: true
    cmds:
      - echo "🔄 Actualizando credenciales OAuth..."
      - echo "Por favor, actualiza las variables de entorno:"
      - echo "  GOOGLE_CLIENT_ID=tu_nuevo_client_id"
      - echo "  GOOGLE_CLIENT_SECRET=tu_nuevo_client_secret"
      - echo "  NEXTAUTH_URL=http://localhost:3000"

  oauth:diagnose:
    desc: "🔍 Diagnóstico completo de OAuth"
    silent: true
    cmds:
      - echo "🔍 Diagnóstico completo de OAuth..."
      - task: oauth:verify
      - echo ""
      - echo "📋 Verificando endpoints:"
      - curl -s http://localhost:3000/api/auth/providers || echo "❌ Endpoint de providers no disponible"
      - echo ""
      - echo "🔧 Configuración NextAuth:"
      - test -f "cactus-wealth-frontend/.env.local" && echo "✅ .env.local existe" || echo "❌ .env.local no existe"

  oauth:test:
    desc: "🧪 Probar configuración OAuth"
    silent: true
    cmds:
      - echo "🧪 Probando configuración OAuth..."
      - task: oauth:verify
      - echo ""
      - echo "🌐 Abriendo página de login..."
      - open http://localhost:3000/auth/login || echo "❌ No se pudo abrir el navegador"

  # ===== LIMPIEZA Y MANTENIMIENTO =====
  cleanup:
    desc: "🧹 Limpieza completa (puertos + caché)"
    silent: true
    cmds:
      - echo "🧹 Limpieza completa..."
      - task: cleanup:ports
      - task: cleanup:frontend
      - task: cleanup:backend
      - echo "✅ Limpieza completada"

  cleanup:ports:
    desc: "🔌 Limpiar puertos ocupados"
    silent: true
    cmds:
      - echo "🔌 Limpiando puertos..."
      - |
        # Si la Podman Machine está corriendo, no matar procesos del host (evita matar gvproxy/qemu)
        if podman machine list 2>/dev/null | grep -q "cactus-dashboard.*Currently running"; then
          echo "ℹ️ Podman Machine en ejecución. Saltando kill de puertos del host."
          echo "   Usa podman-compose down para liberar puertos gestionados por contenedores."
        else
          lsof -ti:3000 | xargs kill -9 2>/dev/null || echo "✅ Puerto 3000 libre"
          lsof -ti:8000 | xargs kill -9 2>/dev/null || echo "✅ Puerto 8000 libre"
          lsof -ti:5432 | xargs kill -9 2>/dev/null || echo "✅ Puerto 5432 libre"
          lsof -ti:6379 | xargs kill -9 2>/dev/null || echo "✅ Puerto 6379 libre"
        fi

  cleanup:frontend:
    desc: "🧹 Limpiar caché del frontend"
    silent: true
    cmds:
      - echo "🧹 Limpiando caché del frontend..."
      - cd cactus-wealth-frontend && rm -rf .next node_modules/.cache 2>/dev/null || echo "✅ Caché frontend limpio"

  cleanup:backend:
    desc: "🧹 Limpiar caché del backend"
    silent: true
    cmds:
      - echo "🧹 Limpiando caché del backend..."
      - cd cactus-wealth-backend && rm -rf __pycache__ .pytest_cache 2>/dev/null || echo "✅ Caché backend limpio"

  cleanup:docker:
    desc: "🐳 Limpiar Podman (imágenes, contenedores)"
    silent: true
    cmds:
      - echo "🐳 Limpiando Podman..."
      - podman system prune -f
      - podman volume prune -f
      - echo "✅ Podman limpio"

  # ===== PODMAN =====
  podman:check:
    desc: "🐳 Verificar Podman"
    silent: true
    cmds:
      - echo "🐳 Verificando Podman..."
      - podman info >/dev/null 2>&1 && echo "✅ Podman funcionando" || (echo "❌ Podman no funciona" && exit 1)

  podman:ensure:
    desc: "🔧 Asegurar que Podman esté disponible"
    silent: true
    cmds:
      - echo "🔧 Asegurando disponibilidad de Podman..."
      - |
        if ! podman machine list | grep -q "cactus-dashboard"; then
          echo "📦 Creando máquina Podman..."
          podman machine init --cpus 4 --memory 8192 --disk-size 50 cactus-dashboard
        fi
      - |
        if ! podman machine list | grep -q "cactus-dashboard.*Currently running"; then
          echo "🚀 Iniciando máquina Podman..."
          podman machine start cactus-dashboard
        else
          echo "✅ Máquina ya está ejecutándose"
        fi
      - echo "✅ Podman disponible"

  podman:verify:
    desc: "✅ Verificar configuración de Podman"
    silent: true
    cmds:
      - echo "✅ Verificando configuración de Podman..."
      - task: podman:check
      - echo ""
      - echo "📊 Información de la máquina:"
      - podman machine list
      - echo ""
      - echo "🔧 Configuración:"
      - podman system connection list
      - echo ""
      - echo "💾 Recursos disponibles:"
      - podman system df

  podman:status:
    desc: "📊 Estado de la máquina Podman"
    silent: true
    cmds:
      - echo "📊 Estado de la máquina Podman:"
      - podman machine list
      - echo ""
      - echo "🔧 Conexiones activas:"
      - podman system connection list

  podman:start:
    desc: "🚀 Iniciar máquina Podman"
    silent: true
    cmds:
      - echo "🚀 Iniciando máquina Podman..."
      - |
        if podman machine list | grep -q "cactus-dashboard.*Currently running"; then
          echo "✅ Máquina ya está ejecutándose"
        else
          podman machine start cactus-dashboard
          echo "✅ Máquina iniciada"
        fi
      - task: podman:status

  podman:stop:
    desc: "⏹️ Detener máquina Podman"
    silent: true
    cmds:
      - echo "⏹️ Deteniendo máquina Podman..."
      - podman machine stop cactus-dashboard
      - echo "✅ Máquina detenida"

  podman:restart:
    desc: "🔄 Reiniciar máquina Podman"
    silent: true
    cmds:
      - echo "🔄 Reiniciando máquina Podman..."
      - task: podman:stop
      - task: podman:start

  podman:helper:install:
    desc: "🔗 Instalar podman-mac-helper (Docker socket compatibility)"
    silent: true
    cmds:
      - echo "🔗 Instalando podman-mac-helper..."
      - |
        HELPER="$(brew --prefix podman)/bin/podman-mac-helper";
        if [ -x "$HELPER" ]; then
          echo "Usando $HELPER";
        else
          echo "❌ podman-mac-helper no encontrado";
          exit 1;
        fi
        if sudo -n "$HELPER" install; then
          echo "✅ mac-helper instalado";
        else
          echo "⚠️  Se requiere sudo interactivo. Ejecuta manualmente: sudo $HELPER install";
          exit 0;
        fi
      - echo "🔄 Reiniciando máquina Podman para aplicar cambios..."
      - podman machine stop cactus-dashboard || true
      - podman machine start cactus-dashboard
      - echo "✅ podman-mac-helper instalado"

  podman:helper:status:
    desc: "🔗 Estado de compatibilidad Docker API (mac-helper)"
    silent: true
    cmds:
      - |
        echo "🔗 Verificando estado del socket Docker API...";
        if test -S /var/run/docker.sock; then
          echo "✅ /var/run/docker.sock presente (compatibilidad activa)";
        else
          echo "ℹ️ /var/run/docker.sock no está enlazado";
        fi
        if [ -z "$DOCKER_HOST" ]; then
          echo "📌 DOCKER_HOST actual: no definido";
        else
          echo "📌 DOCKER_HOST actual: $DOCKER_HOST";
        fi
        echo "💡 Si no está activo: task podman:helper:install"

  podman:helper:uninstall:
    desc: "🔗 Desinstalar podman-mac-helper"
    silent: true
    cmds:
      - echo "🔗 Desinstalando podman-mac-helper..."
      - |
        HELPER="$(brew --prefix podman)/bin/podman-mac-helper";
        if sudo -n "$HELPER" uninstall; then
          echo "✅ mac-helper desinstalado";
        else
          echo "⚠️  Se requiere sudo interactivo. Ejecuta manualmente: sudo $HELPER uninstall";
          exit 0;
        fi
      - echo "🔄 Reiniciando máquina Podman para aplicar cambios..."
      - podman machine stop cactus-dashboard || true
      - podman machine start cactus-dashboard
      - echo "✅ podman-mac-helper desinstalado"

  podman:diagnose:
    desc: "🔍 Diagnóstico completo de Podman"
    silent: true
    cmds:
      - echo "🔍 Diagnóstico completo de Podman..."
      - task: podman:check
      - echo ""
      - echo "📊 Estado de contenedores:"
      - podman ps -a
      - echo ""
      - echo "💾 Uso de recursos:"
      - podman system df
      - echo ""
      - echo "🔧 Configuración de red:"
      - podman network ls
      - echo ""
      - echo "💿 Volúmenes:"
      - podman volume ls

  podman:cleanup:
    desc: "🧹 Limpiar recursos de Podman"
    silent: true
    cmds:
      - echo "🧹 Limpiando recursos de Podman..."
      - podman system prune -f
      - podman volume prune -f
      - podman image prune -f
      - echo "✅ Limpieza completada"

  podman:reset:
    desc: "🔄 Reset completo de Podman"
    silent: true
    cmds:
      - echo "🔄 Reset completo de Podman..."
      - echo "⏹️ Intentando detener stack (si aplica)..."
      - '{{.PODMAN_COMPOSE}} -f {{.COMPOSE_FILE}} down || true'
      - task: podman:cleanup
      - podman machine stop cactus-dashboard 2>/dev/null || echo "✅ Máquina ya detenida"
      - podman machine rm cactus-dashboard 2>/dev/null || echo "✅ Máquina ya eliminada"
      - podman machine init --cpus 4 --memory 8192 --disk-size 50 cactus-dashboard
      - podman machine start cactus-dashboard
      - echo "✅ Reset completado"

  # ===== DOCKER (COMPATIBILIDAD) =====
  docker:check:
    desc: "🐳 Verificar Docker (alias de Podman)"
    silent: true
    cmds:
      - echo "🐳 Verificando Docker (alias de Podman)..."
      - docker info >/dev/null 2>&1 && echo "✅ Docker (Podman) funcionando" || (echo "❌ Docker (Podman) no funciona" && exit 1)

  docker:diagnose:
    desc: "🔍 Diagnóstico de Docker (alias de Podman)"
    silent: true
    cmds:
      - echo "🔍 Diagnóstico de Docker (alias de Podman)..."
      - task: docker:check
      - echo ""
      - echo "📊 Estado de contenedores:"
      - docker ps -a
      - echo ""
      - echo "💾 Uso de recursos:"
      - docker system df

  # ===== TESTING =====
  test:all:
    desc: "🧪 Ejecutar todos los tests"
    silent: true
    cmds:
      - echo "🧪 Ejecutando todos los tests..."
      - task: test:backend
      - task: test:frontend

  test:backend:
    desc: "🧪 Tests del backend"
    silent: true
    cmds:
      - echo "🧪 Tests del backend..."
      - cd cactus-wealth-backend && python -m pytest tests/ -v

  test:frontend:
    desc: "🧪 Tests del frontend"
    silent: true
    cmds:
      - echo "🧪 Tests del frontend..."
      - cd cactus-wealth-frontend && npm test

  test:integration:
    desc: "🧪 Tests de integración"
    silent: true
    cmds:
      - echo "🧪 Tests de integración..."
      - task: dev:stop
      - task: dev
      - sleep 30
      - cd cactus-wealth-backend && python -m pytest tests/integration/ -v

  test:e2e:
    desc: "🧪 Tests end-to-end"
    silent: true
    cmds:
      - echo "🧪 Tests end-to-end..."
      - cd cactus-wealth-frontend && npm run e2e

  # ===== UTILIDADES =====
  setup:
    desc: "⚙️ Configuración inicial"
    silent: true
    cmds:
      - echo "⚙️ Configuración inicial de CactusDashboard..."
      - task: setup:podman-compose
      - task: docker:check
      - echo "📦 Instalando dependencias..."
      - cd cactus-wealth-backend && pip install -r requirements.txt
      - cd cactus-wealth-frontend && npm install
      - echo "✅ Configuración completada"

  setup:podman-compose:
    desc: "📦 Instalar y configurar podman-compose"
    silent: true
    cmds:
      - echo "📦 Verificando podman-compose..."
      - |
        if ! test -f "{{.PODMAN_COMPOSE}}"; then
          echo "🔧 Instalando podman-compose..."
          pip3 install podman-compose
          echo "✅ podman-compose instalado"
        else
          echo "✅ podman-compose ya está disponible"
        fi
      - echo "🔗 Verificando funcionamiento..."
      - '{{.PODMAN_COMPOSE}} --version'

  validate:
    desc: "✅ Validar configuración"
    silent: true
    cmds:
      - echo "✅ Validando configuración..."
      - task: docker:check
      - task: oauth:verify
      - echo "✅ Configuración válida"

  # ===== AYUDA =====
  help:
    desc: "❓ Documentación completa"
    silent: true
    cmds:
      - echo "🌵 CactusDashboard - Sistema de Comandos TASK"
      - echo ""
      - echo "📚 Documentación completa:"
      - echo "  DOCUMENTATION.md - Guía completa del proyecto"
      - echo ""
      - echo "🚀 Comandos principales:"
      - echo "  task dev              - Iniciar desarrollo completo"
      - echo "  task aws:start        - Iniciar instancia AWS"
      - echo "  task logs             - Ver logs en vivo"
      - echo "  task debug            - Diagnóstico completo"
      - echo ""
      - echo "❓ Para más ayuda:"
      - echo "  task --list           - Lista de todos los comandos"
      - echo "  task help:quick       - Ayuda rápida"

  help:quick:
    desc: "⚡ Ayuda rápida (comandos esenciales)"
    silent: true
    cmds:
      - echo "⚡ Comandos esenciales:"
      - echo ""
      - echo "🚀 Desarrollo:"
      - echo "  task dev              - Iniciar desarrollo"
      - echo "  task dev:stop         - Detener desarrollo"
      - echo "  task logs             - Ver logs"
      - echo ""
      - echo "☁️ AWS:"
      - echo "  task aws:start        - Iniciar instancia"
      - echo "  task aws:stop         - Detener instancia"
      - echo "  task aws:status       - Ver estado"
      - echo ""
      - echo "🔧 Utilidades:"
      - echo "  task debug            - Diagnóstico"
      - echo "  task cleanup          - Limpiar todo"
      - echo "  task help             - Ayuda completa"
