version: '3'

tasks:
  test:all:
    desc: Run all tests
    cmds:
      - echo "Running all tests"
      - scripts/cactus.sh test:all

  test:backend:
    desc: Run backend tests
    cmds:
      - echo "Running backend tests"
      - scripts/cactus.sh test:backend

  test:frontend:
    desc: Run frontend tests
    cmds:
      - echo "Running frontend tests"
      - scripts/cactus.sh test:frontend

  test:oauth:
    desc: Run OAuth tests
    cmds:
      - echo "Running OAuth tests"
      - scripts/cactus.sh oauth:test

  test:integration:
    desc: Run integration tests
    cmds:
      - echo "Running integration tests"
      - scripts/cactus.sh test:integration

  setup:dev:
    desc: Setup development environment
    cmds:
      - echo "Setting up development environment"
      - scripts/cactus.sh setup:dev

  setup:backend:
    desc: Setup backend
    cmds:
      - echo "Setting up backend"
      - scripts/cactus.sh setup:backend

  setup:frontend:
    desc: Setup frontend
    cmds:
      - echo "Setting up frontend"
      - scripts/cactus.sh setup:frontend

  setup:oauth:
    desc: Setup OAuth
    cmds:
      - echo "Setting up OAuth"
      - scripts/cactus.sh oauth:setup

  docker:up:
    desc: Start Docker services
    cmds:
      - echo "Starting Docker services"
      - scripts/cactus.sh docker:up

  docker:down:
    desc: Stop Docker services
    cmds:
      - echo "Stopping Docker services"
      - scripts/cactus.sh docker:down

  docker:restart:
    desc: Restart Docker services
    cmds:
      - echo "Restarting Docker services"
      - scripts/cactus.sh docker:restart

  docker:logs:
    desc: Show Docker logs
    cmds:
      - echo "Showing Docker logs"
      - scripts/cactus.sh docker:logs

  debug:oauth:
    desc: Debug OAuth
    cmds:
      - echo "Debugging OAuth"
      - scripts/cactus.sh oauth:debug

  debug:health:
    desc: Health check
    cmds:
      - echo "Checking health"
      - scripts/cactus.sh debug:health

  validate:aws:
    desc: Validate AWS deployment configuration
    cmds:
      - echo "Validating AWS deployment configuration"
      - scripts/validate-deployment.sh

  debug:ports:
    desc: Clean port conflicts
    cmds:
      - echo "Cleaning port conflicts"
      - scripts/cactus.sh debug:ports

  debug:status:
    desc: Show service status
    cmds:
      - echo "Showing service status"
      - scripts/cactus.sh debug:status

  deploy:aws:
    desc: Deploy to AWS
    cmds:
      - echo "Deploying to AWS"
      - scripts/cactus.sh deploy:aws

  deploy:local:
    desc: Deploy locally
    cmds:
      - echo "Deploying locally"
      - scripts/cactus.sh deploy:local

  clean:all:
    desc: Clean all temporary files
    cmds:
      - echo "Cleaning all"
      - scripts/cactus.sh clean:all

  status:
    desc: Show status
    cmds:
      - echo "Showing status"
      - scripts/cactus.sh debug:status

  help:
    desc: Show help
    cmds:
      - echo "Showing help"
      - scripts/cactus.sh help

  github:setup:
    desc: Setup GitHub repository configuration
    cmds:
      - echo "Setting up GitHub repository configuration"
      - scripts/cactus.sh github:setup

  github:update:
    desc: Update GitHub repository URL in configuration
    cmds:
      - echo "Updating GitHub repository URL"
      - scripts/cactus.sh github:update

  github:deploy:
    desc: Deploy to GitHub and then to AWS
    cmds:
      - echo "Deploying to GitHub and AWS"
      - scripts/cactus.sh github:deploy

  github:sync:
    desc: Sync local changes with GitHub repository
    cmds:
      - echo "Syncing with GitHub repository"
      - scripts/cactus.sh github:sync

  # ===== AWS DEPLOYMENT TASKS =====
  deploy:aws:prod:
    desc: Deploy to AWS production environment
    cmds:
      - echo "üöÄ Deploying to AWS production..."
      - docker-compose -f docker-compose.prod.yml build
      - docker-compose -f docker-compose.prod.yml up -d
      - echo "‚úÖ Deployment completed"

  logs:all:
    desc: Show logs from all services
    cmds:
      - echo "üìã Showing logs from all services..."
      - docker-compose -f docker-compose.prod.yml logs -f

  logs:backend:
    desc: Show backend logs
    cmds:
      - echo "üìã Showing backend logs..."
      - docker-compose -f docker-compose.prod.yml logs -f backend

  logs:frontend:
    desc: Show frontend logs
    cmds:
      - echo "üìã Showing frontend logs..."
      - docker-compose -f docker-compose.prod.yml logs -f frontend

  logs:db:
    desc: Show database logs
    cmds:
      - echo "üìã Showing database logs..."
      - docker-compose -f docker-compose.prod.yml logs -f db

  logs:redis:
    desc: Show Redis logs
    cmds:
      - echo "üìã Showing Redis logs..."
      - docker-compose -f docker-compose.prod.yml logs -f redis

  # ===== NGINX CONFIGURATION TASKS =====
  nginx:setup:
    desc: Setup Nginx reverse proxy configuration
    cmds:
      - echo "üîß Setting up Nginx reverse proxy..."
      - |
        echo "Creating Nginx configuration for reverse proxy..."
        echo "This task should be run on the AWS EC2 instance"
        echo "SSH command: ssh -i cactus-key.pem ubuntu@34.195.179.168"
        echo ""
        echo "Run these commands on the server:"
        echo "sudo cp /home/ubuntu/CactusDashboard/config/docker/nginx.conf /etc/nginx/sites-available/cactus-dashboard"
        echo "sudo ln -sf /etc/nginx/sites-available/cactus-dashboard /etc/nginx/sites-enabled/default"
        echo "sudo nginx -t"
        echo "sudo systemctl reload nginx"

  nginx:validate:
    desc: Validate Nginx configuration
    cmds:
      - echo "‚úÖ Validating Nginx configuration..."
      - echo "This should be run on the AWS EC2 instance"
      - echo "Command sudo nginx -t"

  nginx:reload:
    desc: Reload Nginx configuration
    cmds:
      - echo "üîÑ Reloading Nginx..."
      - echo "This should be run on the AWS EC2 instance"
      - echo "Command sudo systemctl reload nginx"

  # ===== VALIDATION TASKS =====
  validate:aws:full:
    desc: Full AWS deployment validation
    cmds:
      - echo "üîç Running full AWS validation..."
      - docker-compose -f docker-compose.prod.yml ps
      - echo "Checking service health..."
      - curl -f http://localhost:8000/health || echo "‚ùå Backend health check failed"
      - curl -f http://localhost:3000 || echo "‚ùå Frontend health check failed"
      - echo "‚úÖ Validation completed"

  validate:endpoints:
    desc: Validate public endpoints
    cmds:
      - echo "üåê Validating public endpoints..."
      - curl -f http://34.195.179.168 || echo "‚ùå Frontend not accessible"
      - curl -f http://34.195.179.168/api/docs || echo "‚ùå API docs not accessible"
      - curl -f http://34.195.179.168/api/health || echo "‚ùå API health not accessible"
      - echo "‚úÖ Endpoint validation completed"

  # ===== GITHUB REPOSITORY TASKS =====
  github:init:
    desc: Initialize GitHub repository
    cmds:
      - echo "üì¶ Initializing GitHub repository..."
      - git init
      - git add .
      - git commit -m "Initial deploy version - CactusDashboard FinTech platform"
      - git branch -M main
      - echo "‚úÖ Repository initialized. Add remote with git remote add origin <REPO_URL>"

  github:push:
    desc: Push changes to GitHub
    cmds:
      - echo "üì§ Pushing changes to GitHub..."
      - git add .
      - git commit -m "Update deployment configuration and Taskfile"
      - git push
      - echo "‚úÖ Changes pushed to GitHub"

  # ===== MIGRATION TASKS =====
  migrate:db:
    desc: Run database migrations
    cmds:
      - echo "üóÉÔ∏è Running database migrations..."
      - docker-compose -f docker-compose.prod.yml exec backend alembic upgrade head
      - echo "‚úÖ Migrations completed"

  # ===== MONITORING TASKS =====
  status:services:
    desc: Show status of all services
    cmds:
      - echo "üìä Checking service status..."
      - docker-compose -f docker-compose.prod.yml ps
      - echo ""
      - echo "üîç Checking resource usage..."
      - docker stats --no-stream

  # ===== BACKUP TASKS =====
  backup:db:
    desc: Backup database
    cmds:
      - echo "üíæ Creating database backup..."
      - mkdir -p ./backups
      - docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U cactus_user cactus_db > ./backups/database_$(date +%Y%m%d_%H%M%S).sql
      - echo "‚úÖ Database backup completed"

  # ===== CLEANUP TASKS =====
  cleanup:docker:
    desc: Clean up Docker resources
    cmds:
      - echo "üßπ Cleaning up Docker resources..."
      - docker system prune -f
      - docker volume prune -f
      - echo "‚úÖ Docker cleanup completed"