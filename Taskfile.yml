version: '3'

vars:
  AWS_INSTANCE_ID: "i-022f3394d98803da8"
  SSH_KEY: "cactus-key.pem"
  COMPOSE_FILE: "docker-compose.prod.yml"

tasks:
  # ===== DESARROLLO LOCAL =====
  dev:
    desc: "🚀 Iniciar desarrollo local completo"
    cmds:
      - task: cleanup
      - echo "🌵 Iniciando CactusDashboard en modo desarrollo..."
      - docker-compose -f {{.COMPOSE_FILE}} up -d
      - echo "⏳ Esperando que los servicios estén listos..."
      - sleep 10
      - task: status:local
      - echo "🎉 Desarrollo iniciado! Frontend http://localhost:3000"

  dev:frontend:
    desc: "🚀 Iniciar solo frontend en localhost:3000"
    cmds:
      - echo "🌵 Iniciando frontend en localhost:3000..."
      - ./scripts/start-frontend.sh

  dev:frontend:clean:
    desc: "🧹 Iniciar frontend con limpieza completa"
    cmds:
      - echo "🧹 Limpiando e iniciando frontend..."
      - ./scripts/cleanup-ports.sh 3000
      - cd cactus-wealth-frontend && rm -rf .next node_modules/.cache
      - cd cactus-wealth-frontend && npm install
      - ./scripts/start-frontend.sh

  dev:stop:
    desc: "⏹️ Detener desarrollo local"
    cmds:
      - echo "🛑 Deteniendo servicios locales..."
      - docker-compose -f {{.COMPOSE_FILE}} down
      - task: cleanup
      - echo "✅ Servicios locales detenidos"

  dev:restart:
    desc: "🔄 Reiniciar desarrollo local"
    cmds:
      - task: dev:stop
      - task: dev

  dev:rebuild:
    desc: "🔨 Rebuild completo y reiniciar"
    cmds:
      - echo "🔨 Rebuilding servicios..."
      - docker-compose -f {{.COMPOSE_FILE}} down
      - docker-compose -f {{.COMPOSE_FILE}} build --no-cache
      - docker-compose -f {{.COMPOSE_FILE}} up -d
      - echo "✅ Rebuild completado"

  # ===== LOGS Y DEBUGGING =====
  logs:
    desc: "📺 Ver logs en vivo - todos los servicios"
    cmds:
      - echo "📺 Logs en vivo (Ctrl+C para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} logs -f --tail=50

  logs:backend:
    desc: "📺 Ver logs del backend"
    cmds:
      - echo "📺 Logs del backend (Ctrl+C para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} logs -f --tail=50 backend

  logs:frontend:
    desc: "📺 Ver logs del frontend"
    cmds:
      - echo "📺 Logs del frontend (Ctrl+C para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} logs -f --tail=50 frontend

  debug:
    desc: "🔍 Diagnóstico completo del sistema"
    cmds:
      - echo "🔍 Diagnóstico completo de CactusDashboard..."
      - task: status:local
      - task: health:local
      - task: ports
      - task: resources

  shell:backend:
    desc: "🐚 Shell interactivo en backend"
    cmds:
      - echo "🐚 Entrando al contenedor backend (exit para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} exec backend /bin/bash

  shell:frontend:
    desc: "🐚 Shell interactivo en frontend"
    cmds:
      - echo "🐚 Entrando al contenedor frontend (exit para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} exec frontend /bin/sh

  shell:db:
    desc: "🐚 Shell PostgreSQL"
    cmds:
      - echo "🐚 Entrando a PostgreSQL (\\q para salir)..."
      - docker-compose -f {{.COMPOSE_FILE}} exec db psql -U cactus_user -d cactus_db

  # ===== ESTADO Y SALUD =====
  status:
    desc: "📊 Estado general del sistema"
    cmds:
      - task: status:local

  status:local:
    desc: "📊 Estado de servicios locales"
    cmds:
      - echo "📊 Estado de contenedores Docker:"
      - docker-compose -f {{.COMPOSE_FILE}} ps
      - echo ""
      - echo "🌐 Puertos en uso:"
      - |
        lsof -i :3000 || echo "  Puerto 3000 Libre"
        lsof -i :8000 || echo "  Puerto 8000 Libre"
        lsof -i :5432 || echo "  Puerto 5432 Libre"
        lsof -i :6379 || echo "  Puerto 6379 Libre"

  health:
    desc: "🏥 Verificar salud de servicios"
    cmds:
      - task: health:local

  health:local:
    desc: "🏥 Verificar salud de servicios locales"
    cmds:
      - echo "🏥 Verificando salud de servicios..."
      - |
        if curl -s -I http://localhost:3000 | head -1 | grep -q "200\|30[0-9]"; then
          echo "✅ Frontend (localhost:3000): OK"
        else
          echo "❌ Frontend (localhost:3000): No responde"
        fi
      - |
        if curl -s http://localhost:8000/health > /dev/null 2>&1; then
          echo "✅ Backend (localhost:8000): OK"
        else
          echo "❌ Backend (localhost:8000): No responde"
        fi

  ports:
    desc: "🔌 Verificar puertos en uso"
    cmds:
      - echo "🔌 Verificando puertos..."
      - |
        for port in 3000 8000 5432 6379 80 443; do
          if lsof -i :$port > /dev/null 2>&1; then
            echo "✅ Puerto $port en uso"
          else
            echo "⚪ Puerto $port libre"
          fi
        done

  resources:
    desc: "📈 Mostrar uso de recursos"
    cmds:
      - echo "📈 Uso de recursos del sistema..."
      - echo "🐳 Estadísticas de contenedores:"
      - docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
      - echo ""
      - echo "💻 Sistema:"
      - |
        top -l 1 | grep "CPU usage" || echo "  CPU: No disponible"
      - echo "💾 Disco:"
      - |
        df -h . | tail -1

  # ===== LIMPIEZA Y MANTENIMIENTO =====
  cleanup:
    desc: "🧹 Limpiar puertos y cachés"
    cmds:
      - echo "🧹 Limpiando puertos y cachés..."
      - ./scripts/cleanup-ports.sh
      - |
        if [ -d "cactus-wealth-frontend/node_modules/.cache" ]; then
          rm -rf cactus-wealth-frontend/node_modules/.cache
          echo "🗑️ Caché de Node.js limpiado"
        fi
        if [ -d "cactus-wealth-frontend/.next" ]; then
          rm -rf cactus-wealth-frontend/.next
          echo "🗑️ Build de Next.js limpiado"
        fi
      - echo "✅ Limpieza completada"

  cleanup:ports:
    desc: "🧹 Limpiar solo puertos (3000, 3001, 8000, 8080)"
    cmds:
      - echo "🧹 Limpiando puertos..."
      - ./scripts/cleanup-ports.sh
      - echo "✅ Puertos limpiados"

  cleanup:frontend:
    desc: "🧹 Limpiar caché y build del frontend"
    cmds:
      - echo "🧹 Limpiando frontend..."
      - |
        cd cactus-wealth-frontend
        rm -rf .next node_modules/.cache dist build
        echo "🗑️ Archivos de build y caché eliminados"
      - echo "✅ Frontend limpiado"

  # ===== AWS GESTIÓN =====
  aws:start:
    desc: "▶️ Iniciar instancia EC2"
    cmds:
      - echo "▶️ Iniciando instancia EC2..."
      - |
        current_state=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null || echo "unknown")
        if [ "$current_state" = "running" ]; then
          echo "⚠️ La instancia ya está ejecutándose"
          ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "🌐 IP pública: $ip"
          echo "🔗 URL: http://$ip"
        else
          aws ec2 start-instances --instance-ids {{.AWS_INSTANCE_ID}} > /dev/null
          echo "⏳ Esperando que la instancia esté lista..."
          aws ec2 wait instance-running --instance-ids {{.AWS_INSTANCE_ID}}
          ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "✅ Instancia iniciada exitosamente"
          echo "🌐 IP pública: $ip"
          echo "🔗 URL: http://$ip"
        fi

  aws:stop:
    desc: "⏹️ Detener instancia EC2 (ahorrar dinero)"
    cmds:
      - echo "⏹️ Deteniendo instancia EC2..."
      - |
        current_state=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null || echo "unknown")
        if [ "$current_state" = "stopped" ]; then
          echo "⚠️ La instancia ya está detenida"
        else
          aws ec2 stop-instances --instance-ids {{.AWS_INSTANCE_ID}} > /dev/null
          echo "⏳ Esperando que la instancia se detenga..."
          aws ec2 wait instance-stopped --instance-ids {{.AWS_INSTANCE_ID}}
          echo "✅ Instancia detenida exitosamente"
          echo "💰 ¡Dinero ahorrado! La instancia ya no genera costos"
        fi

  aws:status:
    desc: "📊 Estado de la instancia EC2"
    cmds:
      - echo "📊 Verificando estado de la instancia EC2..."
      - |
        state=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null || echo "unknown")
        type=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].InstanceType' --output text 2>/dev/null || echo "unknown")
        ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "none")
        
        echo "🆔 ID: {{.AWS_INSTANCE_ID}}"
        echo "📦 Tipo: $type"
        echo "🔄 Estado: $state"
        if [ "$ip" != "none" ] && [ "$ip" != "null" ]; then
          echo "🌐 IP pública: $ip"
          echo "🔗 URL: http://$ip"
        else
          echo "🌐 IP pública: No asignada"
        fi

  aws:ip:
    desc: "🌐 Obtener IP pública de la instancia"
    cmds:
      - |
        ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "none")
        if [ "$ip" != "none" ] && [ "$ip" != "null" ]; then
          echo "🌐 IP pública: $ip"
          echo "🔗 URL: http://$ip"
        else
          echo "❌ No hay IP pública asignada (instancia detenida?)"
        fi

  aws:costs:
    desc: "💰 Ver información de costos"
    cmds:
      - echo "💰 Información de costos AWS..."
      - |
        type=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].InstanceType' --output text 2>/dev/null || echo "unknown")
        state=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null || echo "unknown")
        
        echo "📦 Tipo de instancia: $type"
        echo "🔄 Estado actual: $state"
        echo ""
        echo "💡 Costos estimados por hora (región us-east-1):"
        case $type in
          "t2.micro") echo "   💵 \$0.0116/hora (~\$8.50/mes)" ;;
          "t2.small") echo "   💵 \$0.023/hora (~\$17/mes)" ;;
          "t2.medium") echo "   💵 \$0.046/hora (~\$34/mes)" ;;
          "t3.micro") echo "   💵 \$0.0104/hora (~\$7.60/mes)" ;;
          "t3.small") echo "   💵 \$0.0208/hora (~\$15/mes)" ;;
          *) echo "   💵 Consulta AWS Pricing para $type" ;;
        esac
        echo ""
        if [ "$state" = "running" ]; then
          echo "⚠️ La instancia está EJECUTÁNDOSE - generando costos"
          echo "💡 Usa 'task aws:stop' para detenerla y ahorrar dinero"
        else
          echo "✅ La instancia está DETENIDA - sin costos de cómputo"
          echo "💡 Usa 'task aws:start' para iniciarla cuando la necesites"
        fi

  aws:ssh:
    desc: "🔐 Conectar SSH a la instancia"
    cmds:
      - |
        ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "none")
        if [ "$ip" != "none" ] && [ "$ip" != "null" ]; then
          echo "🔐 Conectando SSH a $ip..."
          ssh -i {{.SSH_KEY}} ubuntu@$ip
        else
          echo "❌ No se puede conectar: instancia sin IP pública"
          echo "💡 Usa 'task aws:start' primero"
        fi

  aws:health:
    desc: "🏥 Verificar salud de servicios en AWS"
    cmds:
      - |
        ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo "none")
        if [ "$ip" != "none" ] && [ "$ip" != "null" ]; then
          echo "🏥 Verificando salud de servicios en $ip..."
          if curl -s -I http://$ip | head -1 | grep -q "200\|30[0-9]"; then
            echo "✅ Aplicación web: OK"
          else
            echo "❌ Aplicación web: No responde"
          fi
          if curl -s http://$ip/api/health > /dev/null 2>&1; then
            echo "✅ API Backend: OK"
          else
            echo "❌ API Backend: No responde"
          fi
        else
          echo "❌ No se puede verificar: instancia sin IP pública"
        fi

  # ===== DESPLIEGUE =====
  deploy:aws:
    desc: "🚀 Desplegar a AWS"
    cmds:
      - echo "🚀 Desplegando CactusDashboard a AWS..."
      - task: aws:start
      - |
        ip=$(aws ec2 describe-instances --instance-ids {{.AWS_INSTANCE_ID}} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "📦 Desplegando aplicación en $ip..."
        
        if ssh -i {{.SSH_KEY}} -o ConnectTimeout=10 ubuntu@$ip "echo 'Conexión SSH exitosa'" > /dev/null 2>&1; then
          echo "✅ Conexión SSH establecida"
          
          ssh -i {{.SSH_KEY}} ubuntu@$ip "cd /home/ubuntu/CactusDashboard && docker-compose -f docker-compose.prod.yml down"
          ssh -i {{.SSH_KEY}} ubuntu@$ip "cd /home/ubuntu/CactusDashboard && git pull origin main"
          ssh -i {{.SSH_KEY}} ubuntu@$ip "cd /home/ubuntu/CactusDashboard && docker-compose -f docker-compose.prod.yml build"
          ssh -i {{.SSH_KEY}} ubuntu@$ip "cd /home/ubuntu/CactusDashboard && docker-compose -f docker-compose.prod.yml up -d"
          
          echo "⏳ Esperando que los servicios estén listos..."
          sleep 30
          
          if curl -s -I http://$ip | head -1 | grep -q "200\|30[0-9]"; then
            echo "✅ Despliegue exitoso!"
            echo "🌐 Aplicación disponible en: http://$ip"
          else
            echo "❌ Error en el despliegue - la aplicación no responde"
          fi
        else
          echo "❌ Error: No se puede conectar SSH a la instancia"
        fi

  # ===== CONFIGURACIÓN Y VALIDACIÓN =====
  setup:
    desc: "⚙️ Configuración inicial del proyecto"
    cmds:
      - echo "⚙️ Configurando CactusDashboard..."
      - echo "📋 Verificando dependencias..."
      - |
        docker --version || echo "❌ Docker no instalado"
        docker-compose --version || echo "❌ Docker Compose no instalado"
        aws --version || echo "❌ AWS CLI no instalado"
      - echo "📁 Verificando archivos de configuración..."
      - |
        test -f docker-compose.prod.yml && echo "✅ docker-compose.prod.yml" || echo "❌ docker-compose.prod.yml no encontrado"
        test -f {{.SSH_KEY}} && echo "✅ SSH key encontrada" || echo "❌ SSH key {{.SSH_KEY}} no encontrada"
      - echo "✅ Configuración inicial completada"

  validate:
    desc: "✅ Validar configuración del proyecto"
    cmds:
      - echo "✅ Validando configuración de CactusDashboard..."
      - task: setup
      - echo "🔍 Validando configuración AWS..."
      - |
        aws sts get-caller-identity > /dev/null && echo "✅ AWS CLI configurado" || echo "❌ AWS CLI no configurado"
      - echo "🔍 Validando instancia EC2..."
      - task: aws:status
      - echo "✅ Validación completada"

  oauth:verify:
    desc: "🔐 Verificar configuración OAuth"
    cmds:
      - echo "🔐 Verificando configuración OAuth..."
      - |
        if [ -f "cactus-wealth-frontend/.env.local" ]; then
          echo "📁 Archivo .env.local encontrado"
          
          nextauth_url=$(grep "NEXTAUTH_URL=" cactus-wealth-frontend/.env.local | cut -d'=' -f2 | tr -d '"' || echo "")
          google_client_id=$(grep "GOOGLE_CLIENT_ID=" cactus-wealth-frontend/.env.local | cut -d'=' -f2 | tr -d '"' || echo "")
          
          if [ ! -z "$nextauth_url" ]; then
            echo "✅ NEXTAUTH_URL: $nextauth_url"
            echo ""
            echo "🔧 Configuración requerida en Google Console:"
            echo "   📍 Authorized JavaScript origins:"
            echo "      $nextauth_url"
            echo "   📍 Authorized redirect URIs:"
            echo "      $nextauth_url/api/auth/callback/google"
            echo ""
          else
            echo "❌ NEXTAUTH_URL no encontrado en .env.local"
          fi
          
          if [ ! -z "$google_client_id" ]; then
            echo "✅ GOOGLE_CLIENT_ID configurado"
          else
            echo "❌ GOOGLE_CLIENT_ID no encontrado en .env.local"
          fi
          
          echo "🔗 Google Console: https://console.developers.google.com/apis/credentials"
        else
          echo "❌ Archivo .env.local no encontrado en cactus-wealth-frontend/"
          echo "💡 Crea el archivo basándote en .env.example"
        fi

  oauth:update:
    desc: "🔄 Actualizar credenciales OAuth de Google"
    cmds:
      - |
        echo "🔄 Actualizando credenciales OAuth..."
        echo ""
        echo "📋 Uso: task oauth:update CLIENT_ID=tu_client_id CLIENT_SECRET=tu_client_secret"
        echo ""
        echo "📝 Ejemplo:"
        echo "   task oauth:update CLIENT_ID=123456789-abcdef.apps.googleusercontent.com CLIENT_SECRET=GOCSPX-abcdef123456"
        echo ""
        echo "🔗 Para obtener credenciales:"
        echo "   1. Ve a: https://console.cloud.google.com/apis/credentials"
        echo "   2. Crea OAuth 2.0 Client ID (Web application)"
        echo "   3. Configura URLs autorizadas:"
        echo "      - JavaScript origins: http://localhost:3000"
        echo "      - Redirect URIs: http://localhost:3000/api/auth/callback/google"
        echo ""
        
        if [ -z "{{.CLIENT_ID}}" ] || [ -z "{{.CLIENT_SECRET}}" ]; then
          echo "❌ Error: Debes proporcionar CLIENT_ID y CLIENT_SECRET"
          echo ""
          echo "💡 Ejemplo de uso correcto:"
          echo "   task oauth:update CLIENT_ID=tu_client_id CLIENT_SECRET=tu_client_secret"
          exit 1
        fi
        
        echo "🔧 Ejecutando script de actualización..."
        ./update-oauth-credentials.sh "{{.CLIENT_ID}}" "{{.CLIENT_SECRET}}"
        echo ""
        echo "✅ ¡Credenciales OAuth actualizadas!"
        echo "🌐 Prueba la autenticación en: http://localhost:3000"

  # ===== AYUDA =====
  help:
    desc: "❓ Mostrar ayuda completa y organizada"
    cmds:
      - |
        clear
        echo ""
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                    🌵 CACTUS DASHBOARD - TASK SYSTEM                        ║"
        echo "║                         Sistema Unificado de Comandos                       ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo ""
        echo "┌─ 🚀 DESARROLLO LOCAL ─────────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task dev             🚀 Iniciar desarrollo completo                         │"
        echo "│  task dev:stop        ⏹️  Detener todos los servicios                        │"
        echo "│  task dev:restart     🔄 Reiniciar desarrollo                                │"
        echo "│  task dev:rebuild     🔨 Rebuild completo y reiniciar                        │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ 📺 LOGS & DEBUGGING ─────────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task logs            📺 Ver logs en vivo (todos los servicios)              │"
        echo "│  task logs:backend    🐍 Solo logs del backend                               │"
        echo "│  task logs:frontend   ⚛️  Solo logs del frontend                             │"
        echo "│  task debug           🔍 Diagnóstico completo del sistema                    │"
        echo "│  task shell:backend   🐚 Shell interactivo en backend                        │"
        echo "│  task shell:frontend  🐚 Shell interactivo en frontend                       │"
        echo "│  task shell:db        🗄️  Shell PostgreSQL                                   │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ 📊 MONITOREO & ESTADO ───────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task status          📊 Estado general del sistema                          │"
        echo "│  task health          🏥 Verificar salud de todos los servicios              │"
        echo "│  task ports           🔌 Verificar puertos en uso                            │"
        echo "│  task resources       📈 Mostrar uso de CPU, memoria y disco                 │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ ☁️ AWS MANAGEMENT ────────────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task aws:start       ▶️  Iniciar instancia EC2                              │"
        echo "│  task aws:stop        ⏹️  Detener instancia (💰 ahorrar dinero)              │"
        echo "│  task aws:status      📊 Estado de la instancia EC2                          │"
        echo "│  task aws:ip          🌐 Obtener IP pública actual                           │"
        echo "│  task aws:costs       💰 Ver información de costos                           │"
        echo "│  task aws:ssh         🔐 Conectar SSH a la instancia                         │"
        echo "│  task aws:health      🏥 Verificar salud de servicios en AWS                 │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ 🚀 DEPLOYMENT ───────────────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task deploy:aws      🚀 Desplegar aplicación completa a AWS                 │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ ⚙️ CONFIGURACIÓN & UTILIDADES ───────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task setup           ⚙️  Configuración inicial del proyecto                 │"
        echo "│  task validate        ✅ Validar toda la configuración                       │"
        echo "│  task oauth:verify    🔐 Verificar configuración OAuth                       │"
        echo "│  task oauth:update    🔄 Actualizar credenciales OAuth                       │"
        echo "│  task cleanup         🧹 Limpiar puertos y cachés                            │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "┌─ ❓ AYUDA & INFORMACIÓN ───────────────────────────────────────────────────────┐"
        echo "│                                                                               │"
        echo "│  task help            ❓ Esta ayuda completa                                  │"
        echo "│  task help:quick      ⚡ Ayuda rápida (comandos esenciales)                  │"
        echo "│  task --list          📋 Lista rápida de todos los comandos                  │"
        echo "│                                                                               │"
        echo "└───────────────────────────────────────────────────────────────────────────────┘"
        echo ""
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                           💡 EJEMPLOS DE USO                                ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo ""
        echo "  🎯 Desarrollo diario:"
        echo "     task dev                    # Iniciar desarrollo completo"
        echo "     task logs                   # Monitorear logs en tiempo real"
        echo "     task status                 # Ver estado del sistema"
        echo ""
        echo "  ☁️ Gestión AWS:"
        echo "     task aws:start              # Iniciar instancia y obtener IP"
        echo "     task deploy:aws             # Desplegar aplicación completa"
        echo "     task aws:stop               # Detener instancia para ahorrar dinero"
        echo ""
        echo "  🔧 Troubleshooting:"
        echo "     task debug                  # Diagnóstico completo"
        echo "     task cleanup                # Limpiar puertos bloqueados"
        echo "     task validate               # Verificar configuración"
        echo ""
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                          🎉 SISTEMA UNIFICADO                               ║"
        echo "║                                                                              ║"
        echo "║  ✅ Todos los scripts han sido consolidados en Task                         ║"
        echo "║  ✅ Sintaxis consistente: task <comando>                                    ║"
        echo "║  ✅ Documentación integrada y autocompletado                                ║"
        echo "║  ✅ Optimización del 90%+ en tiempos de ejecución                          ║"
        echo "║                                                                              ║"
        echo "║  📚 Documentación completa: DOCUMENTATION.md                                ║"
        echo "║  🚀 Guía de inicio rápido: README.md                                        ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo ""

  help:quick:
    desc: "⚡ Ayuda rápida - comandos esenciales"
    cmds:
      - |
        echo ""
        echo "⚡ COMANDOS ESENCIALES - CACTUS DASHBOARD"
        echo "════════════════════════════════════════"
        echo ""
        echo "🚀 DESARROLLO:"
        echo "   task dev              # Iniciar desarrollo"
        echo "   task dev:stop         # Detener desarrollo"
        echo "   task logs             # Ver logs en vivo"
        echo "   task status           # Estado del sistema"
        echo ""
        echo "☁️ AWS:"
        echo "   task aws:start        # Iniciar instancia EC2"
        echo "   task aws:stop         # Detener instancia (ahorrar dinero)"
        echo "   task deploy:aws       # Desplegar a AWS"
        echo ""
        echo "🔧 UTILIDADES:"
        echo "   task debug            # Diagnóstico completo"
        echo "   task cleanup          # Limpiar puertos"
        echo "   task help             # Ayuda completa"
        echo ""
        echo "💡 Usa 'task help' para ver todos los comandos disponibles"
        echo ""