# Docker Compose para Testing - CactusDashboard
# ConfiguraciÃ³n optimizada para tests automatizados

services:
  db-test:
    image: postgres:15-alpine
    restart: "no"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cactus_dashboard_test
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - cactus_test_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cactus_dashboard_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: >
      postgres
      -c shared_buffers=32MB
      -c effective_cache_size=96MB
      -c maintenance_work_mem=8MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=2MB
      -c work_mem=1MB
      -c fsync=off
      -c synchronous_commit=off
      -c full_page_writes=off

  redis-test:
    image: redis:7-alpine
    restart: "no"
    ports:
      - "6380:6379"
    networks:
      - cactus_test_network
    command: >
      redis-server
      --maxmemory 32mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    deploy:
      resources:
        limits:
          memory: 40M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend-test:
    build:
      context: .
      dockerfile: ./cactus-wealth-backend/Dockerfile
      args:
        - ENVIRONMENT=test
    restart: "no"
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db-test:5432/cactus_dashboard_test
      REDIS_URL: redis://redis-test:6379
      GOOGLE_CLIENT_ID: mock-google-client-id
      GOOGLE_CLIENT_SECRET: mock-google-client-secret
      GOOGLE_REDIRECT_URI: http://localhost:3001/auth/google/callback
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      ENVIRONMENT: test
      LOG_LEVEL: DEBUG
      WORKERS: 1
      DISABLE_RELOAD: "true"
      TESTING: "true"
      MOCK_EXTERNAL_APIS: "true"
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - cactus_test_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend-test:
    build:
      context: ./cactus-wealth-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=test
        - NEXT_TELEMETRY_DISABLED=1
        - NEXT_PUBLIC_GOOGLE_CLIENT_ID=mock-google-client-id
        - NEXT_PUBLIC_GOOGLE_REDIRECT_URI=http://localhost:3001/auth/google/callback
        - NEXT_PUBLIC_API_URL=http://localhost:8001/api
        - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3001
    restart: "no"
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://localhost:8001/api
      NEXT_PUBLIC_FRONTEND_URL: http://localhost:3001
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: mock-google-client-id
      NEXT_PUBLIC_GOOGLE_REDIRECT_URI: http://localhost:3001/auth/google/callback
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      TESTING: "true"
    depends_on:
      backend-test:
        condition: service_healthy
    networks:
      - cactus_test_network
    deploy:
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres_test_data:
    driver: local

networks:
  cactus_test_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16