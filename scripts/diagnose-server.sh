#!/bin/bash

# üîç DIAGN√ìSTICO AVANZADO - CactusDashboard
# Script para diagnosticar problemas de conectividad y estado del servidor

set -euo pipefail

# Configuraci√≥n
SERVER_IP="3.137.157.34"
SSH_KEY="cactus-key.pem"
SSH_USER="ubuntu"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Funci√≥n para verificar conectividad b√°sica
check_basic_connectivity() {
    log "üîç DIAGN√ìSTICO DE CONECTIVIDAD B√ÅSICA"
    echo
    
    # 1. Verificar si la clave SSH existe y tiene permisos correctos
    if [[ ! -f "$SSH_KEY" ]]; then
        error "‚ùå Clave SSH no encontrada: $SSH_KEY"
        return 1
    fi
    
    local key_perms=$(stat -c %a "$SSH_KEY" 2>/dev/null || stat -f %A "$SSH_KEY" 2>/dev/null)
    if [[ "$key_perms" != "600" ]]; then
        warn "‚ö†Ô∏è Permisos de clave SSH incorrectos: $key_perms (deber√≠a ser 600)"
        chmod 600 "$SSH_KEY"
        log "‚úÖ Permisos corregidos"
    else
        log "‚úÖ Permisos de clave SSH correctos"
    fi
    
    # 2. Ping b√°sico
    log "üèì Probando ping al servidor..."
    if ping -c 3 -W 5 "$SERVER_IP" >/dev/null 2>&1; then
        log "‚úÖ Ping exitoso"
    else
        warn "‚ö†Ô∏è Ping fall√≥ (puede estar bloqueado por firewall)"
    fi
    
    # 3. Verificar puerto SSH
    log "üîå Verificando puerto SSH (22)..."
    if timeout 10 bash -c "echo >/dev/tcp/$SERVER_IP/22" 2>/dev/null; then
        log "‚úÖ Puerto SSH accesible"
    else
        error "‚ùå Puerto SSH no accesible"
        return 1
    fi
    
    # 4. Probar conexi√≥n SSH b√°sica
    log "üîê Probando conexi√≥n SSH b√°sica..."
    if timeout 15 ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USER@$SERVER_IP" "echo 'SSH OK'" 2>/dev/null; then
        log "‚úÖ Conexi√≥n SSH exitosa"
        return 0
    else
        error "‚ùå Conexi√≥n SSH fall√≥"
        return 1
    fi
}

# Funci√≥n para diagn√≥stico del servidor
diagnose_server() {
    log "üñ•Ô∏è DIAGN√ìSTICO DEL SERVIDOR"
    echo
    
    # Informaci√≥n del sistema
    log "üìä Informaci√≥n del sistema:"
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '=== SISTEMA ==='
        uname -a
        echo
        echo '=== MEMORIA ==='
        free -h
        echo
        echo '=== DISCO ==='
        df -h /
        echo
        echo '=== CARGA DEL SISTEMA ==='
        uptime
        echo
        echo '=== PROCESOS DOCKER ==='
        ps aux | grep docker | head -10
        echo
        echo '=== CONTENEDORES DOCKER ==='
        docker ps -a || echo 'Docker no disponible'
        echo
        echo '=== PUERTOS EN USO ==='
        netstat -tlnp | grep -E ':(22|3000|8000|5432|6379)' || echo 'Puertos no encontrados'
    " 2>/dev/null || {
        error "‚ùå No se pudo obtener informaci√≥n del servidor"
        return 1
    }
}

# Funci√≥n para diagn√≥stico de Docker
diagnose_docker() {
    log "üê≥ DIAGN√ìSTICO DE DOCKER"
    echo
    
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '=== VERSI√ìN DOCKER ==='
        docker --version || echo 'Docker no instalado'
        echo
        echo '=== VERSI√ìN DOCKER COMPOSE ==='
        docker-compose --version || echo 'Docker Compose no instalado'
        echo
        echo '=== ESTADO DEL SERVICIO DOCKER ==='
        sudo systemctl status docker --no-pager || echo 'Systemctl no disponible'
        echo
        echo '=== ESPACIO DOCKER ==='
        docker system df || echo 'Docker no disponible'
        echo
        echo '=== LOGS DOCKER RECIENTES ==='
        sudo journalctl -u docker --no-pager --lines=10 || echo 'Journalctl no disponible'
    " 2>/dev/null || {
        error "‚ùå No se pudo obtener informaci√≥n de Docker"
        return 1
    }
}

# Funci√≥n para diagn√≥stico del proyecto
diagnose_project() {
    log "üìÅ DIAGN√ìSTICO DEL PROYECTO"
    echo
    
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '=== DIRECTORIO DEL PROYECTO ==='
        ls -la ~/apps/CactusDashboard/ || echo 'Directorio no encontrado'
        echo
        echo '=== ESTADO GIT ==='
        cd ~/apps/CactusDashboard && git status || echo 'Git no disponible'
        echo
        echo '=== ARCHIVOS DOCKER COMPOSE ==='
        cd ~/apps/CactusDashboard && ls -la docker-compose*.yml || echo 'Archivos no encontrados'
        echo
        echo '=== ARCHIVO .ENV ==='
        cd ~/apps/CactusDashboard && ls -la .env || echo 'Archivo .env no encontrado'
        echo
        echo '=== LOGS DEL PROYECTO ==='
        cd ~/apps/CactusDashboard && ls -la logs/ || echo 'Directorio logs no encontrado'
    " 2>/dev/null || {
        error "‚ùå No se pudo obtener informaci√≥n del proyecto"
        return 1
    }
}

# Funci√≥n para limpiar recursos si es necesario
cleanup_resources() {
    log "üßπ LIMPIEZA DE RECURSOS"
    echo
    
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '=== DETENIENDO CONTENEDORES ==='
        cd ~/apps/CactusDashboard && docker-compose -f docker-compose.simple.yml down --remove-orphans || echo 'No se pudieron detener contenedores'
        echo
        echo '=== LIMPIANDO CONTENEDORES HU√âRFANOS ==='
        docker container prune -f || echo 'No se pudieron limpiar contenedores'
        echo
        echo '=== LIMPIANDO IM√ÅGENES NO UTILIZADAS ==='
        docker image prune -f || echo 'No se pudieron limpiar im√°genes'
        echo
        echo '=== VERIFICANDO ESPACIO LIBERADO ==='
        df -h /
    " 2>/dev/null || {
        warn "‚ö†Ô∏è Algunos comandos de limpieza fallaron"
    }
}

# Funci√≥n principal
main() {
    log "üîç INICIANDO DIAGN√ìSTICO COMPLETO"
    log "Servidor: $SERVER_IP"
    echo
    
    # Verificar conectividad b√°sica
    if ! check_basic_connectivity; then
        error "‚ùå Fallo en conectividad b√°sica. No se puede continuar."
        exit 1
    fi
    
    echo
    # Diagn√≥stico del servidor
    diagnose_server
    
    echo
    # Diagn√≥stico de Docker
    diagnose_docker
    
    echo
    # Diagn√≥stico del proyecto
    diagnose_project
    
    echo
    # Preguntar si limpiar recursos
    log "¬øDeseas limpiar recursos Docker? (esto detendr√° contenedores actuales)"
    read -p "Continuar con limpieza? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cleanup_resources
    fi
    
    echo
    log "üéØ RECOMENDACIONES:"
    log "1. Si Docker est√° funcionando, ejecuta: ./scripts/emergency-deploy.sh"
    log "2. Si hay problemas de espacio, ejecuta limpieza de Docker"
    log "3. Si hay procesos colgados, reinicia el servidor EC2"
    log "4. Verifica los logs del sistema para errores espec√≠ficos"
    echo
    log "‚úÖ DIAGN√ìSTICO COMPLETADO"
}

# Ejecutar si es llamado directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi