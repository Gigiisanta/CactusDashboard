# CactusDashboard Global Rules

## Token Optimization - Maximum Efficiency
- Eliminar explicaciones innecesarias, contexto redundante, comentarios verbose
- Output mínimo indispensable sin sacrificar comprensión técnica
- Solo código funcional, production-ready, alineado con CactusDashboard.md
- Un único bloque de código listo para usar
- Sin preámbulos, introducciones o conclusiones
- Máxima densidad de información útil por token

## Architecture Alignment
- Seguir estrictamente CactusDashboard.md como fuente de verdad
- Stack: Next.js + FastAPI + PostgreSQL, Tailwind, Zustand, SQLModel, Pydantic
- DRY, clean, type-safe, escalable
- Testing obligatorio: pytest (backend), jest/playwright (frontend)

## Code Generation Rules
- Pensar paso a paso antes de generar código
- Retornar solo código en un único bloque, listo para pegar
- Si se generan servicios, generar tests asociados
- Si se generan endpoints, generar esquemas asociados
- Sin explicaciones ni comentarios externos al bloque de código
- No incluir contexto adicional a menos que sea estrictamente requerido

## Quality Without Compromise
- Mantener todos los estándares de typing, testing, patterns
- Conservar principios de seguridad y arquitectura limpia
- Asegurar compatibilidad total con stack existente
- Optimización automática sin reducir efectividad técnica 