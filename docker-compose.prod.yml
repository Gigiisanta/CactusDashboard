version: '3.8'

# Docker Compose optimizado para AWS Free Tier (t3.micro)
# Configuración de producción con límites de recursos

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cactus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cactus_password}
      POSTGRES_DB: ${POSTGRES_DB:-cactus_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    # SEGURIDAD: Puerto NO expuesto al host - Solo accesible internamente
    # ports:
    #   - "5432:5432"  # ELIMINADO por seguridad
    expose:
      - "5432"  # Solo expuesto a la red interna de Docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cactus_user} -d ${POSTGRES_DB:-cactus_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=192MB
      -c maintenance_work_mem=16MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=4MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # SEGURIDAD: Puerto NO expuesto al host - Solo accesible internamente
    # ports:
    #   - "6379:6379"  # ELIMINADO por seguridad
    expose:
      - "6379"  # Solo expuesto a la red interna de Docker
    networks:
      - cactus_network
    command: >
      redis-server
      --maxmemory 64mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-cactus_redis_secure_2024}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-cactus_redis_secure_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./cactus-wealth-backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    restart: unless-stopped
    # SEGURIDAD: Solo expuesto internamente, acceso via Nginx reverse proxy
    expose:
      - "8000"
    # ports:
    #   - "8000:8000"  # ELIMINADO - Solo accesible via Nginx
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cactus_user}:${POSTGRES_PASSWORD:-cactus_password}@db:5432/${POSTGRES_DB:-cactus_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-cactus_redis_secure_2024}@redis:6379
      SYNC_BRIDGE_URL: http://sync_bridge:8001
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      PYTHONPATH: /app/src
      DISABLE_RELOAD: "true"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: 1
      MAX_WORKERS: 2
      WORKER_TIMEOUT: 120
      KEEPALIVE: 2
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  arq_worker:
    build:
      context: ./cactus-wealth-backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    restart: unless-stopped
    entrypoint: []
    command: ["python", "-m", "arq", "cactus_wealth.worker.WorkerSettings"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cactus_user}:${POSTGRES_PASSWORD:-cactus_password}@db:5432/${POSTGRES_DB:-cactus_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-cactus_redis_secure_2024}@redis:6379
      SYNC_BRIDGE_URL: http://sync_bridge:8001
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      PYTHONPATH: /app/src
      DISABLE_RELOAD: "true"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ARQ_WORKER_CONCURRENCY: 2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      sync_bridge:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis.from_url('redis://redis:6379'); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./cactus-wealth-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_TELEMETRY_DISABLED=1
    restart: unless-stopped
    # SEGURIDAD: Solo expuesto internamente, acceso via Nginx reverse proxy
    expose:
      - "3000"
    # ports:
    #   - "3000:3000"  # ELIMINADO - Solo accesible via Nginx
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL:-http://localhost:3000}
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 192M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  sync_bridge:
    build:
      context: ./sync-bridge
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    restart: unless-stopped
    # SEGURIDAD: Solo expuesto internamente
    expose:
      - "8001"
    # ports:
    #   - "8001:8001"  # ELIMINADO - Solo accesible internamente
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cactus_user}:${POSTGRES_PASSWORD:-cactus_password}@db:5432/${POSTGRES_DB:-cactus_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-cactus_redis_secure_2024}@redis:6379
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy Seguro
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-secure.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro  # Para SSL certificates
    depends_on:
      - backend
      - frontend
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n para automatización (opcional, comentar si no se usa)
  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: "0.0.0.0"
      N8N_PORT: "5678"
      N8N_PROTOCOL: "http"
      N8N_USER_MANAGEMENT_DISABLED: "true"
      N8N_DIAGNOSTICS_ENABLED: "false"
      N8N_METRICS: "false"
      N8N_LOG_LEVEL: "error"
      N8N_EXECUTIONS_DATA_PRUNE: "true"
      N8N_EXECUTIONS_DATA_MAX_AGE: 168  # 7 días
      GENERIC_TIMEZONE: "America/Argentina/Buenos_Aires"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Watchtower para actualizaciones automáticas (opcional)
  watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 86400  # 24 horas
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "false"
      WATCHTOWER_NOTIFICATIONS: "email"
      WATCHTOWER_NOTIFICATION_EMAIL_FROM: ${WATCHTOWER_EMAIL_FROM:-noreply@your-domain.com}
      WATCHTOWER_NOTIFICATION_EMAIL_TO: ${WATCHTOWER_EMAIL_TO:-admin@your-domain.com}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: ${SMTP_PORT:-587}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: ${SMTP_USER:-}
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: ${SMTP_PASSWORD:-}
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.05'
        reservations:
          memory: 32M
          cpus: '0.02'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/cactus/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/cactus/data/redis
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/cactus/data/n8n

networks:
  cactus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16