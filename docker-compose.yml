version: '3.8'

services:
  # ===== BACKEND API =====
  backend:
    build:
      context: ./cactus-wealth-backend
      dockerfile: Dockerfile
    container_name: cactus-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/cactus_wealth
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-cactus-secret-key-2024}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-http://localhost:3000/auth/google/callback}
      - BACKEND_URL=${BACKEND_URL:-http://localhost:8000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - EMAIL_SERVER_HOST=${EMAIL_SERVER_HOST:-smtp.sendgrid.net}
      - EMAIL_SERVER_PORT=${EMAIL_SERVER_PORT:-587}
      - EMAIL_SERVER_USER=${EMAIL_SERVER_USER:-apikey}
      - EMAIL_SERVER_PASS=${EMAIL_SERVER_PASS}
      - EMAIL_FROM=${EMAIL_FROM:-"Cactus Wealth <noreply@cactuswealth.com>"}
    depends_on:
      - db
      - redis
    volumes:
      - ./cactus-wealth-backend:/app
      - backend_logs:/app/logs
    networks:
      - cactus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== FRONTEND =====
  frontend:
    build:
      context: ./cactus-wealth-frontend
      dockerfile: Dockerfile.dev
    container_name: cactus-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Use service DNS name inside the compose network; the browser still hits the Next proxy on :3000
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000/api/v1
      - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-cactus-nextauth-secret-2024}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - EMAIL_SERVER_HOST=${EMAIL_SERVER_HOST:-smtp.sendgrid.net}
      - EMAIL_SERVER_PORT=${EMAIL_SERVER_PORT:-587}
      - EMAIL_SERVER_USER=${EMAIL_SERVER_USER:-apikey}
      - EMAIL_SERVER_PASS=${EMAIL_SERVER_PASS}
      - EMAIL_FROM=${EMAIL_FROM:-"Cactus Wealth <noreply@cactuswealth.com>"}
    depends_on:
      - backend
    volumes:
      - ./cactus-wealth-frontend:/app
      - /app/node_modules
      - /app/.next
      - frontend_logs:/app/logs
    networks:
      - cactus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== DATABASE =====
  db:
    image: postgres:15-alpine
    container_name: cactus-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cactus_wealth
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cactus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cactus_wealth"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: cactus-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cactus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ===== NGINX REVERSE PROXY (PRODUCTION) =====
  nginx:
    image: nginx:alpine
    container_name: cactus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - cactus-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: cactus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cactus-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: cactus-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cactus-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cactus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16