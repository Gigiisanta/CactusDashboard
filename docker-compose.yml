version: '3.8'

# Docker Compose simplificado para AWS Free Tier (t3.micro)
# Configuración de producción sin sync-bridge

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cactus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cactus_password}
      POSTGRES_DB: ${POSTGRES_DB:-cactus_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cactus_user} -d ${POSTGRES_DB:-cactus_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      postgres
      -c shared_buffers=64MB
      -c effective_cache_size=192MB
      -c maintenance_work_mem=16MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=4MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - cactus_network
    command: >
      redis-server
      --maxmemory 64mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-cactus_redis_secure_2024}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-cactus_redis_secure_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: ./cactus-wealth-backend/Dockerfile
      args:
        - ENVIRONMENT=production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cactus_user}:${POSTGRES_PASSWORD:-cactus_password}@db:5432/${POSTGRES_DB:-cactus_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-cactus_redis_secure_2024}@redis:6379
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      PYTHONPATH: /app/src
      DISABLE_RELOAD: "true"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: 1
      MAX_WORKERS: 2
      WORKER_TIMEOUT: 120
      KEEPALIVE: 2
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./cactus-wealth-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_TELEMETRY_DISABLED=1
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL:-http://localhost:3000}
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cactus_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 192M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 120s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cactus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16