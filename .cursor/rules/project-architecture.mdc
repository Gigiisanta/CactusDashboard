# CactusDashboard - Arquitectura y Principios Fundamentales

## 🏗️ **Arquitectura General**

CactusDashboard es una plataforma FinTech de gestión de riqueza con arquitectura moderna:

- **Frontend**: Next.js 15.4.1 + TypeScript + shadcn/ui + Tailwind CSS
- **Backend**: FastAPI + SQLModel + Pydantic + ARQ (Redis)
- **Base de Datos**: PostgreSQL
- **Contenerización**: Docker + Docker Compose
- **Testing**: Jest + Playwright + pytest
- **Infraestructura**: AWS EC2 + Terraform

## 📁 **Estructura del Proyecto**

### Backend (`cactus-wealth-backend/`)
```
src/cactus_wealth/
├── api/v1/endpoints/     # Endpoints de la API
├── core/                 # Configuración central (config.py, arq.py)
├── repositories/         # Capa de acceso a datos
├── services/            # Lógica de negocio
├── models.py            # Modelos SQLModel
├── schemas.py           # Esquemas Pydantic
└── main.py              # Punto de entrada
```

### Frontend (`cactus-wealth-frontend/`)
```
app/
├── dashboard/           # Dashboard principal
├── clients/            # Gestión de clientes
├── portfolios/         # Gestión de portafolios
├── auth/              # Autenticación OAuth
└── components/        # Componentes reutilizables
```

### Infraestructura (`terraform/`)
```
terraform/
├── main.tf             # Configuración principal
├── terraform.tfvars    # Variables de entorno
├── user-data.sh        # Script de inicialización
└── lambda/             # Funciones Lambda
```

## 🚀 **Comandos Principales**

### Desarrollo Local
```bash
# Iniciar servicios
task docker:up

# Ejecutar tests
task test:all

# Validar configuración
task validate:aws
```

### Despliegue AWS
```bash
# Desplegar a AWS
task deploy:aws

# Verificar estado
aws ec2 describe-instances --instance-ids i-0913b3f472d7001ef
```

## 🔧 **Configuración de Producción**

### URLs de Producción
- **Frontend**: http://34.195.179.168:3000
- **Backend**: http://34.195.179.168:8000
- **API Docs**: http://34.195.179.168:8000/docs
- **SSH**: `ssh -i cactus-key.pem ubuntu@34.195.179.168`

### Presupuesto y Monitoreo
- **Instancia**: t4g.small (Free Tier hasta 31-dic-2025)
- **Auto-downgrade**: t4g.micro (01-ene-2026 00:15 UTC)
- **Presupuesto**: $75 USD/mes (95% alerta = $71.25)
- **Región**: us-east-1

## 📚 **Archivos Clave**

### Configuración
- [Taskfile.yml](mdc:Taskfile.yml) - Comandos de automatización
- [terraform/main.tf](mdc:terraform/main.tf) - Infraestructura AWS
- [terraform/terraform.tfvars](mdc:terraform/terraform.tfvars) - Variables de entorno

### Documentación
- [CACTUS_MEMORY.md](mdc:CACTUS_MEMORY.md) - Memoria del proyecto
- [MONITORING-RUNBOOK.md](mdc:MONITORING-RUNBOOK.md) - Procedimientos operacionales
- [README.md](mdc:README.md) - Guía de inicio rápido

### Aplicación
- [cactus-wealth-backend/src/cactus_wealth/main.py](mdc:cactus-wealth-backend/src/cactus_wealth/main.py) - Backend entry point
- [cactus-wealth-frontend/app/layout.tsx](mdc:cactus-wealth-frontend/app/layout.tsx) - Frontend layout
- [config/docker/docker-compose.yml](mdc:config/docker/docker-compose.yml) - Contenedores

## 🎯 **Principios de Desarrollo**

1. **Arquitectura Limpia**: Separación clara de capas
2. **Type Safety**: TypeScript + Pydantic end-to-end
3. **Testing First**: Cobertura completa de tests
4. **Infrastructure as Code**: Terraform para AWS
5. **Cost Optimization**: Free Tier + auto-downgrade
6. **Security First**: OAuth + HTTPS + Firewall
